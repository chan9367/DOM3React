{"version":3,"sources":["Components/TableCell.js","Components/TableRow.js","Components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","changeColor","setState","color","getTableColor","state","coordinate","className","this","key","style","background","onClick","e","Component","TableRow","getCurrentColor","rowNum","cells","columns","outputCells","i","push","currentColor","ReactDOM","render","document","getElementsByClassName","Table","getColor","rows","outputRows","App","newUpdate","cellsDelete","rowsDelete","rowHolderDelete","tableDelete","tableContainerDelete","length","addRows","Number","unmountComponentAtNode","remove","el","createElement","parentNode","insertBefore","getElementsByTagName","addColumns","console","log","j","currentCell","currentRow","childNodes","updateTable","changeStates","update","generateTable","getElementById","handleChange","event","target","name","value","handleColor","click","clearStates","bind","numOfCells","numOfRows","numOfTables","numOfContTable","type","onChange","id","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c857fab1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TableCell extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={    \r\n            coordinate: this.props.coordinate,        \r\n            color: \"white\",            \r\n\r\n        };\r\n     }\r\n \r\n\r\n    changeColor = () =>{\r\n        \r\n        this.setState({\r\n            color: this.props.getTableColor(),            \r\n        });\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n            <div className={\"table-cell\"+this.state.coordinate} >\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td key={this.props.color} style={{background: this.state.color}} className={\"cell \" + this.state.coordinate} onClick={e => this.changeColor()}></td>\r\n                        </tr>\r\n                        \r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            \r\n\r\n            \r\n            \r\n        )     \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default TableCell;","import React, { Component } from \"react\";\r\nimport TableCell from './TableCell.js';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass TableRow extends Component {\r\n    \r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            rowNum: this.props.rowNum,\r\n\r\n            cells: this.props.columns,            \r\n\r\n        };\r\n     }\r\n\r\n    \r\n\r\n     getCurrentColor = () =>{         \r\n         return this.props.changeColor(); \r\n     }\r\n\r\n    componentDidMount(){\r\n\r\n        let outputCells = [];\r\n\r\n        for(let i = 0; i < this.state.cells; i++)\r\n        {     \r\n\r\n            outputCells.push(<TableCell coordinate={this.state.rowNum + \"-\" + i} currentColor={this.state.currentColor} getTableColor={this.getCurrentColor}/>);\r\n\r\n        }\r\n        outputCells.push(<div className={\"end-row \" + this.state.rowNum}></div>)\r\n        ReactDOM.render((outputCells),\r\n        document.getElementsByClassName(\"row\")[this.state.rowNum]); \r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className={\"r-holder \" + this.state.rowNum}>\r\n            <div key={this.props.currentColor} className={\"row \" + this.state.rowNum}></div>\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default TableRow;","import React, { Component } from \"react\";\r\nimport TableRow from './TableRow.js';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Table extends Component {\r\n    \r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            columns: this.props.columns,\r\n            rows: this.props.rows,\r\n            color: this.props.color,\r\n          }\r\n     }\r\n\r\n     \r\n\r\n    \r\n    componentDidMount(){\r\n        \r\n        let outputRows = [];\r\n        for(let i = 0; i < this.state.rows; i++)\r\n        {   \r\n            \r\n\r\n            outputRows.push(<TableRow rowNum={i} columns={this.state.columns} currentColor={this.state.color} changeColor = {this.getColor}/>);\r\n\r\n        }\r\n        outputRows.push(<div className=\"end-table\"></div>)\r\n        ReactDOM.render((outputRows),\r\n        document.getElementsByClassName(\"table\")[0]);        \r\n\r\n    }\r\n    getColor = () => {\r\n        return this.props.getColor();\r\n    }\r\n\r\n\r\n    \r\n\r\n    \r\n    render(){\r\n        \r\n        return(\r\n            <>\r\n\r\n                <div className=\"table\">\r\n\r\n                    \r\n                </div>\r\n            </>\r\n        );\r\n        \r\n    }\r\n    }\r\n\r\n\r\n\r\nexport default Table;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Table from './Components/Table.js';\r\nimport TableRow from './Components/TableRow.js';\r\nimport TableCell from './Components/TableCell.js';\r\n\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state= {\r\n      addRows:0,\r\n      addColumns: 0,\r\n      columns: 0,\r\n      rows: 0,\r\n      update: false,\r\n      click: 1,\r\n\r\n      color: \"\",\r\n\r\n    };\r\n    this.clearStates = this.clearStates.bind(this);\r\n  }\r\n  \r\n  getColor = () =>{\r\n    return this.state.color;\r\n  }\r\n  \r\n  \r\n  newUpdate = () =>{\r\n    let cellsDelete = document.getElementsByClassName(\"table-cell\");\r\n    let rowsDelete = document.getElementsByClassName(\"row\");\r\n    let rowHolderDelete = document.getElementsByClassName(\"r-holder\");\r\n    let tableDelete = document.getElementsByClassName(\"table\");\r\n    let tableContainerDelete = document.getElementsByClassName(\"table-container\");\r\n\r\n    let numOfCells = cellsDelete.length;\r\n    let numOfRows = rowsDelete.length;\r\n    let numOfRHolders = rowHolderDelete.length;\r\n    let numOfTables = tableDelete.length;\r\n    let numOfContTable = tableContainerDelete.length;\r\n    \r\n    \r\n\r\n    if(this.state.addRows < 0){      \r\n      for(let i = Number(this.state.rows) + (-Number(this.state.addRows)) - 1; i > Number(this.state.rows) - 1; i--)\r\n      {        \r\n        ReactDOM.unmountComponentAtNode(rowsDelete[i]);   \r\n        rowsDelete[i].remove();\r\n        ReactDOM.unmountComponentAtNode(rowHolderDelete[i]);    \r\n        rowHolderDelete[i].remove();\r\n\r\n      }          \r\n    }\r\n    else if (this.state.addRows > 0){      \r\n      let outputRows = [];\r\n        for(let i = Number(this.state.rows) - Number(this.state.addRows); i < this.state.rows; i++)\r\n        {               \r\n            outputRows.push(<TableRow rowNum={i} columns={this.state.columns} currentColor={this.state.color} changeColor = {this.getColor}/>);\r\n        }\r\n\r\n        let el = document.createElement(\"span\");\r\n        document.getElementsByClassName(\"end-table\")[0].parentNode.insertBefore(el,  document.getElementsByClassName(\"end-table\")[0]);\r\n        \r\n\r\n        ReactDOM.render((outputRows),\r\n        document.getElementsByTagName(\"span\")[ document.getElementsByTagName(\"span\").length-1]);         \r\n    }\r\n\r\n    if(this.state.addColumns < 0)\r\n    {\r\n      for(let i = 0; i < this.state.rows; i++)\r\n      {\r\n        let currentRow = document.getElementsByClassName(\"row \" + i)[0];\r\n        console.log(\"ROWS: \" + document.getElementsByClassName(\"row \" + i).length);\r\n       \r\n\r\n\r\n        for(let j = Number(this.state.columns) + (-Number(this.state.addColumns)) - 1; j > Number(this.state.columns) - 1; j--)\r\n        {  \r\n            let currentCell = document.getElementsByClassName(\"table-cell\"+i+\"-\"+j)[0];\r\n            ReactDOM.unmountComponentAtNode(currentCell);   \r\n            currentCell.remove();\r\n                       \r\n          \r\n        } \r\n\r\n      }\r\n      \r\n    }    \r\n    else if (this.state.addColumns > 0) {\r\n      for(let i = 0; i < this.state.rows; i++)\r\n      {\r\n        let currentRow = document.getElementsByClassName(\"row \" + i)[0];\r\n        let outputCells = [];\r\n        console.log(\"ROWS: \" + document.getElementsByClassName(\"row \" + i).length);\r\n        console.log(\"ENDROW: \" + document.getElementsByClassName(\"end-row \" + i).parentNode);\r\n        for(let j = this.state.columns - this.state.addColumns; j < Number(this.state.columns); j++)\r\n        {  \r\n            console.log(i + \" \" + j);\r\n            outputCells.push(<TableCell coordinate={i + \"-\" + j} \r\n            currentColor={\"white\"} \r\n            getTableColor={this.getColor}/>);          \r\n        } \r\n        let el = document.createElement(\"section\");\r\n\r\n        console.log(\"ROW WHRE BREAKS:\" + i);\r\n        document.getElementsByClassName(\"end-row \" + i)[0].parentNode.insertBefore(el,  document.getElementsByClassName(\"end-row \" + i)[0]);\r\n        \r\n\r\n        ReactDOM.render((outputCells),\r\n        currentRow.childNodes[currentRow.childNodes.length-2]);\r\n\r\n      }\r\n\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  updateTable = () => {\r\n    this.newUpdate();\r\n    /*\r\n    if(this.state.click === 1){\r\n      this.clearStates();\r\n      ReactDOM.unmountComponentAtNode(document.getElementById(\"table-container\"));     \r\n      this.setState({click: 2}, this.generateTable);\r\n      \r\n    }\r\n    else if(this.state.click === 2){      \r\n    \r\n      ReactDOM.render((<Table columns={this.state.columns} rows={this.state.rows}/>),\r\n      document.getElementById(\"table-container\")); \r\n      this.setState({click: 1});      \r\n    }  \r\n    \r\n    */\r\n  }\r\n  \r\n  changeStates = () =>{\r\n    if(this.state.rows > 0 || this.state.columns > 0)\r\n    {\r\n      this.setState({update: true});\r\n    }\r\n    else{\r\n      this.setState({update: false});\r\n    }\r\n    \r\n    this.setState({columns: Number(this.state.columns) + Number(this.state.addColumns),\r\n      rows: Number(this.state.rows) + Number(this.state.addRows)}, \r\n      this.generateTable);        \r\n  }\r\n\r\n  generateTable = () =>{        \r\n    if(!this.state.update)\r\n    {\r\n      ReactDOM.render((<Table columns={this.state.columns} rows={this.state.rows} getColor ={this.getColor}/>),\r\n\r\n      document.getElementById(\"table-container\")); \r\n    }\r\n    else{\r\n      this.updateTable();\r\n    }\r\n     \r\n  }\r\n  \r\n  clearStates() {    \r\n    let cellsDelete = document.getElementsByClassName(\"table-cell\");\r\n    let rowsDelete = document.getElementsByClassName(\"row\");\r\n    let tableDelete = document.getElementsByClassName(\"table\");\r\n    let tableContainerDelete = document.getElementsByClassName(\"table-container\");\r\n\r\n    let numOfCells = cellsDelete.length;\r\n    let numOfRows = rowsDelete.length;\r\n    let numOfTables = tableDelete.length;\r\n    let numOfContTable = tableContainerDelete.length;\r\n\r\n    for(let i = numOfCells - 1; i >= 0; i--)\r\n    {\r\n      ReactDOM.unmountComponentAtNode(cellsDelete[i]);\r\n    }\r\n\r\n    for(let i = numOfRows - 1; i >= 0; i--)\r\n    {\r\n      ReactDOM.unmountComponentAtNode(rowsDelete[i]);\r\n    }\r\n\r\n    for(let i = numOfTables - 1; i >= 0; i--)\r\n    {\r\n      ReactDOM.unmountComponentAtNode(tableDelete[i]);\r\n    }\r\n\r\n    for(let i = numOfContTable - 1; i >= 0; i--)\r\n    {\r\n      ReactDOM.unmountComponentAtNode(tableContainerDelete[i]);\r\n    }        \r\n      \r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n\r\n  handleColor = (event) => {\r\n    this.setState({color: event.target.value})    \r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <>\r\n        \r\n        <div><p>(1) Choose number of Rows to be added</p><input type=\"text\" name=\"addRows\" onChange={this.handleChange}></input></div>\r\n        <div><p>(2) Choose number of Columns to be added</p><input type=\"text\" name=\"addColumns\" onChange={this.handleChange}></input></div>\r\n\r\n        <div>\r\n        <div>\r\n         <label> (3) Choose a color: </label>\r\n            <select name=\"color\" onChange={this.handleColor}>\r\n                <option value=\"\">-------</option>\r\n                <option value=\"red\">Red</option>\r\n                <option value=\"orange\">Orange</option>\r\n                <option value=\"yellow\">Yellow</option>\r\n                <option value=\"green\">Green</option>\r\n                <option value=\"blue\">Blue</option>\r\n                <option value=\"purple\">Purple</option>\r\n            </select>\r\n            {console.log(\"current picked color: \"+this.state.color)}\r\n\r\n         \r\n        </div>\r\n        <p>(4) Click on the button to generate a table</p><button \r\n            className=\"button-add\"\r\n            onClick={() => {                 \r\n                      this.changeStates();                                                 \r\n            }}>\r\n              GENERATE                    \r\n            </button>            \r\n        </div>\r\n\r\n        \r\n        \r\n        <div id=\"table-container\">          \r\n        </div>\r\n        <p>(5) Click on a cell after the table is generated to color it</p>\r\n      </>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
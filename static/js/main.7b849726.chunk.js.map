{"version":3,"sources":["Components/TableCell.js","Components/TableRow.js","Components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","changeColor","event","setState","color","target","style","backgroundColor","console","log","state","background","className","onClick","this","Component","TableRow","rowNum","cells","columns","outputCells","i","push","ReactDOM","render","document","getElementsByClassName","Table","rows","outputRows","App","updateTable","click","clearStates","unmountComponentAtNode","getElementById","generateTable","changeStates","update","Number","AddColumns","AddRows","handleChange","name","value","handleColor","bind","cellsDelete","rowsDelete","tableDelete","tableContainerDelete","numOfCells","length","numOfRows","numOfTables","numOfContTable","type","onChange","id","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b849726.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TableCell extends Component {\n    constructor(props){\n        super(props);\n        this.state={            \n            color: this.props.color,\n        };\n     }\n \n\n    changeColor = (event) =>{\n        this.setState({color: this.props.color});\n        event.target.style.backgroundColor = this.props.color;\n        console.log(\"you clicked: \"+this.props.color);\n    }\n\n    render(){\n        return(\n            <table>\n                <tbody>\n                    <tr>\n                        <td style={{background: \"white\"}} className=\"table-cell\" onClick={this.changeColor}></td>\n                    </tr>\n                    \n                </tbody>\n            </table>\n            \n            \n        )     \n    }\n}\n\n\n\nexport default TableCell;","import React, { Component } from \"react\";\nimport TableCell from './TableCell.js';\nimport ReactDOM from 'react-dom';\n\nclass TableRow extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            rowNum: this.props.rowNum,\n            cells: this.props.columns,\n            color: this.props.color,\n        };\n     }\n\n    componentDidMount(){\n\n        let outputCells = [];\n\n        for(let i = 0; i < this.state.cells; i++)\n        {     \n            outputCells.push(<TableCell color={this.props.color}/>);\n        }\n        \n        ReactDOM.render((outputCells),\n        document.getElementsByClassName(\"row\")[this.state.rowNum]); \n\n    }\n\n    render(){\n        return(\n            <div className={\"row \" + this.state.rowNum}></div>\n        );\n        \n    }\n}\n\n\n\nexport default TableRow;","import React, { Component } from \"react\";\nimport TableRow from './TableRow.js';\nimport ReactDOM from 'react-dom';\n\nclass Table extends Component {\n    constructor(props){\n        super(props);\n        this.state= {\n            columns: this.props.columns,\n            rows: this.props.rows,\n            color: this.props.color,\n          }\n     }\n\n    componentDidMount(){\n        \n        let outputRows = [];\n        for(let i = 0; i < this.state.rows; i++)\n        {     \n            \n            outputRows.push(<TableRow color={this.props.color} rowNum={i} columns={this.state.columns}/>);\n        }\n        \n        ReactDOM.render((outputRows),\n        document.getElementsByClassName(\"table\")[0]);        \n\n    }\n\n    \n    render(){\n        return(\n            <>\n        \n                <div className=\"table\">\n                    \n                </div>\n            </>\n        );\n        \n    }\n    }\n\n\n\nexport default Table;","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './Components/Table.js';\nimport ReactDOM from 'react-dom';\n\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state= {\n      AddRows:0,\n      AddColumns: 0,\n      columns: 0,\n      rows: 0,\n      update: false,\n      click: 1,\n      color:\"\",\n    };\n    this.clearStates = this.clearStates.bind(this);\n  }\n  \n  \n  updateTable = () => {\n    \n    if(this.state.click === 1){\n      this.clearStates();\n      ReactDOM.unmountComponentAtNode(document.getElementById(\"table-container\"));     \n      this.setState({click: 2}, this.generateTable);\n      \n    }\n    else if(this.state.click === 2){      \n    \n      ReactDOM.render((<Table columns={this.state.columns} rows={this.state.rows}/>),\n      document.getElementById(\"table-container\")); \n      this.setState({click: 1});      \n    }\n    \n    \n    \n  }\n  \n  changeStates = () =>{\n    if(this.state.rows > 0 || this.state.columns > 0)\n    {\n      this.setState({update: true});\n    }\n    else{\n      this.setState({update: false});\n    }\n    \n    this.setState({columns: Number(this.state.columns)+ Number(this.state.AddColumns),\n      rows: Number(this.state.rows) + Number(this.state.AddRows)}, \n      this.generateTable);        \n  }\n\n  generateTable = () =>{        \n    if(!this.state.update)\n    {\n      ReactDOM.render((<Table color={this.state.color} columns={this.state.columns} rows={this.state.rows}/>),\n      document.getElementById(\"table-container\")); \n    }\n    else{\n      this.updateTable();\n    }\n     \n  }\n  \n  clearStates() {    \n    let cellsDelete = document.getElementsByClassName(\"table-cell\");\n    let rowsDelete = document.getElementsByClassName(\"row\");\n    let tableDelete = document.getElementsByClassName(\"table\");\n    let tableContainerDelete = document.getElementsByClassName(\"table-container\");\n\n    let numOfCells = cellsDelete.length;\n    let numOfRows = rowsDelete.length;\n    let numOfTables = tableDelete.length;\n    let numOfContTable = tableContainerDelete.length;\n\n    for(let i = numOfCells - 1; i >= 0; i--)\n    {\n      ReactDOM.unmountComponentAtNode(cellsDelete[i]);\n    }\n\n    for(let i = numOfRows - 1; i >= 0; i--)\n    {\n      ReactDOM.unmountComponentAtNode(rowsDelete[i]);\n    }\n\n    for(let i = numOfTables - 1; i >= 0; i--)\n    {\n      ReactDOM.unmountComponentAtNode(tableDelete[i]);\n    }\n\n    for(let i = numOfContTable - 1; i >= 0; i--)\n    {\n      ReactDOM.unmountComponentAtNode(tableContainerDelete[i]);\n    }        \n      \n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n  handleColor = (event) => {\n    this.setState({color: event.target.value});\n    //add something to pass through the color?\n}\n  render(){\n    return (\n      <>\n      \n        <div><p>(1) Choose number of Rows to be added</p><input type=\"text\" name=\"AddRows\" onChange={this.handleChange}></input></div>\n        <div><p> (2) Choose number of Columns to be added</p><input  type=\"text\" name=\"AddColumns\" onChange={this.handleChange}></input></div>\n        <div>\n        <div>\n         <label> (3) Choose a color: </label>\n            <select name=\"color\" onChange={this.handleColor}>\n                <option value=\"\">-------</option>\n                <option value=\"red\">Red</option>\n                <option value=\"orange\">Orange</option>\n                <option value=\"yellow\">Yellow</option>\n                <option value=\"green\">Green</option>\n                <option value=\"blue\">Blue</option>\n                <option value=\"purple\">Purple</option>\n            </select>\n            {console.log(\"current picked color: \"+this.state.color)}\n\n         \n        </div>\n        <p>(4) Click on the button to generate a table</p><button \n            className=\"button-add\"\n            onClick={() => {                 \n                      this.changeStates();                                                 \n            }}>\n              GENERATE                    \n            </button>            \n        </div>\n        \n        <div id=\"table-container\">          \n        </div>\n        <p>(5) Click on a cell after the table is generated</p>\n      </>\n      \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Components/TableCell.js","Components/TableRow.js","Components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","state","id","className","Component","TableRow","rowNum","cells","columns","outputCells","i","this","push","ReactDOM","render","document","getElementsByClassName","Table","handleColor","event","setState","color","target","value","rows","outputRows","name","onChange","console","log","App","updateTable","click","clearStates","unmountComponentAtNode","getElementById","generateTable","changeStates","update","Number","AddColumns","AddRows","handleChange","bind","cellsDelete","rowsDelete","tableDelete","tableContainerDelete","numOfCells","length","numOfRows","numOfTables","numOfContTable","placeholder","type","onClick","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e20d603b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TableCell extends Component {\n    constructor(props){\n        super(props);\n        this.state={            \n            \n        };\n     }\n\n\n     \n render(){\n     return(\n         <td id=\"cell\" className=\"table-cell\"></td>\n     )     \n   }\n}\n\n\n\nexport default TableCell;","import React, { Component } from \"react\";\nimport TableCell from './TableCell.js';\nimport ReactDOM from 'react-dom';\n\nclass TableRow extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            rowNum: this.props.rowNum,\n            cells: this.props.columns,\n        };\n     }\n\n    componentDidMount(){\n\n        let outputCells = [];\n\n        for(let i = 0; i < this.state.cells; i++)\n        {     \n            outputCells.push(<TableCell/>);\n        }\n        \n        ReactDOM.render((outputCells),\n        document.getElementsByClassName(\"row\")[this.state.rowNum]); \n\n    }\n\n    render(){\n        return(\n            <div className={\"row \" + this.state.rowNum}></div>\n        );\n        \n    }\n}\n\n\n\nexport default TableRow;","import React, { Component } from \"react\";\nimport TableRow from './TableRow.js';\nimport ReactDOM from 'react-dom';\n\nclass Table extends Component {\n    constructor(props){\n        super(props);\n        this.state= {\n            columns: this.props.columns,\n            rows: this.props.rows,\n            color: \"\",\n          }\n     }\n\n    componentDidMount(){\n        \n        let outputRows = [];\n        for(let i = 0; i < this.state.rows; i++)\n        {     \n            \n            outputRows.push(<TableRow rowNum={i} columns={this.state.columns}/>);\n        }\n        \n        ReactDOM.render((outputRows),\n        document.getElementsByClassName(\"table\")[0]);        \n\n    }\n\n    handleColor = (event) => {\n        this.setState({color: event.target.value})\n        \n    \n    }\n    \n    render(){\n        return(\n            <>\n        <div>\n         <label>Choose a color: </label>\n            <select name=\"color\" onChange={this.handleColor}>\n                <option value=\"\">-------</option>\n                <option value=\"red\">Red</option>\n                <option value=\"orange\">Orange</option>\n                <option value=\"yellow\">Yellow</option>\n                <option value=\"green\">Green</option>\n                <option value=\"blue\">Blue</option>\n                <option value=\"purple\">Purple</option>\n            </select>\n            {console.log(\"current picked color: \"+this.state.color)}\n        </div>\n                <div className=\"table\">\n                    \n                </div>\n            </>\n        );\n        \n    }\n    }\n\n\n\nexport default Table;","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './Components/Table.js';\nimport ReactDOM from 'react-dom';\n\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state= {\n      AddRows:0,\n      AddColumns: 0,\n      columns: 5,\n      rows: 5,\n      update: false,\n      click: 1,\n    };\n    this.clearStates = this.clearStates.bind(this);\n  }\n  \n  \n  updateTable = () => {\n    \n    if(this.state.click === 1){\n      this.clearStates();\n      ReactDOM.unmountComponentAtNode(document.getElementById(\"table-container\"));     \n      this.setState({click: 2}, this.generateTable);\n      \n    }\n    else if(this.state.click === 2){      \n    \n      ReactDOM.render((<Table columns={this.state.columns} rows={this.state.rows}/>),\n      document.getElementById(\"table-container\")); \n      this.setState({click: 1});      \n    }\n    \n    \n    \n  }\n  \n  changeStates = () =>{\n    if(this.state.rows > 0 || this.state.columns > 0)\n    {\n      this.setState({update: true});\n    }\n    else{\n      this.setState({update: false});\n    }\n    \n    this.setState({columns: Number(this.state.columns)+ Number(this.state.AddColumns),\n      rows: Number(this.state.rows) + Number(this.state.AddRows)}, \n      this.generateTable);        \n  }\n\n  generateTable = () =>{        \n    if(!this.state.update)\n    {\n      ReactDOM.render((<Table columns={this.state.columns} rows={this.state.rows}/>),\n      document.getElementById(\"table-container\")); \n    }\n    else{\n      this.updateTable();\n    }\n     \n  }\n  \n  clearStates() {    \n    let cellsDelete = document.getElementsByClassName(\"table-cell\");\n    let rowsDelete = document.getElementsByClassName(\"row\");\n    let tableDelete = document.getElementsByClassName(\"table\");\n    let tableContainerDelete = document.getElementsByClassName(\"table-container\");\n\n    let numOfCells = cellsDelete.length;\n    let numOfRows = rowsDelete.length;\n    let numOfTables = tableDelete.length;\n    let numOfContTable = tableContainerDelete.length;\n\n    for(let i = numOfCells - 1; i >= 0; i--)\n    {\n      ReactDOM.unmountComponentAtNode(cellsDelete[i]);\n    }\n\n    for(let i = numOfRows - 1; i >= 0; i--)\n    {\n      ReactDOM.unmountComponentAtNode(rowsDelete[i]);\n    }\n\n    for(let i = numOfTables - 1; i >= 0; i--)\n    {\n      ReactDOM.unmountComponentAtNode(tableDelete[i]);\n    }\n\n    for(let i = numOfContTable - 1; i >= 0; i--)\n    {\n      ReactDOM.unmountComponentAtNode(tableContainerDelete[i]);\n    }        \n      \n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n\n  }\n  render(){\n    return (\n      <>\n        <div><p>Choose number of Rows to be added</p><input placeholder=\"5\" type=\"text\" name=\"AddRows\" onChange={this.handleChange}></input></div>\n        <div><p>Choose number of Columns to be added</p><input placeholder=\"5\" type=\"text\" name=\"AddColumns\" onChange={this.handleChange}></input></div>\n        <div>\n        <button \n            className=\"button-add\"\n            onClick={() => {                 \n                      this.changeStates();                                                 \n            }}>\n              GENERATE                    \n            </button>            \n        </div>\n        \n        <div id=\"table-container\">          \n        </div>\n      </>\n      \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}